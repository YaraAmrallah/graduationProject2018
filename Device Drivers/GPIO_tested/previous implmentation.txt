Alternate Function:
___________________
GPIO_CheckType RetVar;
    const GPIO_CfgType * CfgSel;
    CfgSel = & GPIO_ConfigParam[GroupId];
    if ((GroupId <GPIO_GROUPS_NUMBER)){
        switch (AlternFuncId){
        case 0:
            GPIOAFSEL_REG(CfgSel->PortId) &= ~(CfgSel->PortMask);
            break;
        case 1:
            GPIOAFSEL_REG(CfgSel->PortId) |= (CfgSel->PortMask);
            switch (CfgSel->PortId){
            //PORT A
            case 0x00: //UART 0
                    GPIOPCTL_REG(CfgSel->PortId) |= (1<<0 || 1<<4);     //pin0 & pin1
                break;
            //PORT B
            case 0x01: //UART 1
                    GPIOPCTL_REG(CfgSel->PortId) |= (1<<0 || 1<<4);     //pin0 & pin1
                break;
            //PORT C
            case 0x02: //UART 4 && UART 3
                if(CfgSel->PortMask==1<<4||CfgSel->PortMask==1<<5){ //UART4
                    GPIOPCTL_REG(CfgSel->PortId) |= (1<<16 || 1<<20);  //pin4 & pin5
                }else if(CfgSel->PortMask==1<<6 || CfgSel->PortMask == 1<<7){//UART3
                    GPIOPCTL_REG(CfgSel->PortId) |= (1<<24 || 1<<28);  //pin6 & pin7
                }else if(CfgSel->PortMask==1<<0||CfgSel->PortMask==1<<1||CfgSel->PortMask==1<<2||CfgSel->PortMask==1<<3){ //m4 3arf eh el peripheral da xD
                    //no Idea what is going on here xD
                }
                break;
             //PORT D
            case 0x03: //SSI &UART6 &UART2
                if(CfgSel->PortMask==1<<0||CfgSel->PortMask==1<<1||CfgSel->PortMask==1<<2||CfgSel->PortMask==1<<3){//SSI
                    // ma 3leena
                }else if(CfgSel->PortMask==1<<4||CfgSel->PortMask==1<<5){//UART6
                    GPIOPCTL_REG(CfgSel->PortId) |= (1<<16 || 1<<20);  //pin4 & pin5
                }else if(CfgSel->PortMask==1<<6||CfgSel->PortMask==1<<7){//UART2
                    GPIOPCTL_REG(CfgSel->PortId) |= (1<<24 || 1<<28);  //pin6 & pin7
                }
                break;
              //PORT E
            case 0x04:
                if(CfgSel->PortMask==1<<0||CfgSel->PortMask==1<<1){//UART7
                    GPIOPCTL_REG(CfgSel->PortId) |= (1<<0 || 1<<4);     //pin0 & pin1
                }else if(CfgSel->PortMask==1<<4 || CfgSel->PortMask==1<<5){//UART5
                    GPIOPCTL_REG(CfgSel->PortId) |= (1<<16 || 1<<20);  //pin4 & pin5
                }
                break;
              //PORT F
            case 0x05:  //UART1 RTS,CTS
                GPIOPCTL_REG(CfgSel->PortId) |= (1<<0 || 1<<4);     //pin0 & pin1
                break;
            default:
            }
            break;

            case 2:
                if(CfgSel->PortId==0x02 &&(CfgSel->PortDirection==1<<4||CfgSel->PortDirection==1<<5) ){
                    GPIOPCTL_REG(CfgSel->PortId) |= (1<<16 || 1<<20);  //pin4 & pin5
                }
            break;

        default:
        }

        RetVar=GPIO_OK;
        }else{RetVar = GPIO_NOK;}

    return RetVar;
 

Set interrupt event:
_______________________
GPIO_CheckType RetVar;
    const GPIO_CfgType * CfgINT;
    CfgINT = &GPIO_ConfigParam[GroupId];
    if ((GroupId <GPIO_GROUPS_NUMBER)){
        if(IntMaskStatus == MASK_DISABLED){
            //3e4 7yatak
        }else{
            GPIOIM_REG(CfgINT->PortId) &= ~(1<<(CfgINT->PortMask));         // disable
            if(IntEvent == EVENT_FALL_EDGE){
                GPIOIS_REG(CfgINT->PortId)  &= ~(CfgINT->PortMask); //edge.
                GPIOIBE_REG(CfgINT->PortId) &= ~(CfgINT->PortMask); //control
                GPIOIEV_REG(CfgINT->PortId) &= ~(CfgINT->PortMask); //falling
            }else if(IntEvent == EVENT_RISE_EDGE){
                GPIOIS_REG(CfgINT->PortId)  &= ~(CfgINT->PortMask); //edge.
                GPIOIBE_REG(CfgINT->PortId) &= ~(CfgINT->PortMask); //control
                GPIOIEV_REG(CfgINT->PortId) |=  (CfgINT->PortMask); //rising
            }else if(IntEvent == EVENT_BOTH_EDGE){
                GPIOIS_REG(CfgINT->PortId)  &= ~(CfgINT->PortMask); //edge.
                GPIOIBE_REG(CfgINT->PortId) |=  (CfgINT->PortMask); //control
            }else if(IntEvent == EVENT_LOW){
                GPIOIS_REG(CfgINT->PortId)  |=  (CfgINT->PortMask); //level
                GPIOIBE_REG(CfgINT->PortId) &= ~(CfgINT->PortMask); //control
                GPIOIEV_REG(CfgINT->PortId) &= ~(CfgINT->PortMask); //low level
            }else if(IntEvent == EVENT_HIGH){
                GPIOIS_REG(CfgINT->PortId)  |= (CfgINT->PortMask); //level
                GPIOIBE_REG(CfgINT->PortId) &=~(CfgINT->PortMask); //control
                GPIOIEV_REG(CfgINT->PortId) |= (CfgINT->PortMask); //high
            }

            GPIOICR_REG(CfgINT->PortId) |=  (CfgINT->PortMask); //clear
            GPIOIM_REG(CfgINT->PortId)  |=  (CfgINT->PortMask);// enable

            GPIO_INT_NUM INT_PORT =INT_EN_PORTF;     //enable interrupts on port F.
            EN_INT(INT_PORT);
        } RetVar = GPIO_OK;

    }else{RetVar = GPIO_NOK;}
    return RetVar;